Compiler Options
Option
- noImplicitAny
When enabled, the compiler will warn you about variables that are inferred with the any type. You’ll then have to explicitly annotate them with any if you have a reason to do so.

- noImplicitReturns
When enabled, the compiler will check all code paths in a function to ensure they return a value.

- noUnusedLocals
When enabled, the compiler will report unused local variables.

- noUnusedParameters
When enabled, the compiler will report unused parameters.

- Strict Compiler Option
the strict option enables a range of type-checking behavior. The exact settings affected by this are dependent on the version of the TypeScript compiler you’re using. The newer versions may introduce additional stricter checking under this flag so upgrading the TypeScript compiler may result in new errors.
You can see the exact options enabled by turning on the strict setting here:
https://www.typescriptlang.org/tsconfig#strict
You’ll gradually get familiar with these settings as we go through the course.

- strictNullChecks
When enabled, null and undefined will not be acceptable values for variables
 unless you explicitly declare them as nullable. 
 So, you’ll get an error if you set a variable to null or undefined.

- allowUnreachableCode
When set the false, reports error about unreachable code.

- noImplicitOverride
When enabled, then compiler will warn us if we try to override
 a method without using the override keyword.
 
- allowJs
To include JavaScript code in a TypeScript project, we need to enable the allowJs setting in tsconfig.

- checkJS
enable type checking for JavaScript
